{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","constants.js","containers/App.js","actions.js","registerServiceWorker.js","reducers.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","this","setState","Component","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","connect","searchField","searchRobots","requestRobots","isPending","error","dispatch","onSearchChange","event","text","target","value","payload","onRequestRobots","fetch","then","response","json","data","catch","useState","count","setCount","useEffect","console","log","filteredRobots","filter","robot","toLowerCase","includes","length","onClick","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.46134298.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ id, name, email }) => {\n  return (\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img alt=\"robots\" src={`https://robohash.org/${id}?200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card.js';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {robots.map((user, i) => {\n        return <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} />;\n      })}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"Search Robots\"\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{overflowY: 'scroll', border: '5px solid black', height: '700px'}}>\n      {props.children}\n    </div>\n  )\n};\n\nexport default Scroll;\n","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n    };\n  }\n\n  componentDidCatch() {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Oooops. That is not good.</h1>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundry;\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundary';\nimport './App.css';\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error,\n  };\n};\n\nconst mapDispatchToProps = () => (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => {\n      requestRobots(dispatch);\n    },\n  };\n};\n\nfunction App(props) {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    props.onRequestRobots();\n    console.log(count);\n  }, [count]);\n\n  const { searchField, onSearchChange, robots, isPending } = props;\n  const filteredRobots = robots.filter((robot) => {\n    return robot.name.toLowerCase().includes(searchField.toLowerCase());\n  });\n  return isPending.length ? (\n    <h1>Loading</h1>\n  ) : (\n    <div className=\"tc\">\n      <h1 className=\"f1\">RoboFriends</h1>\n      <button onClick={() => setCount(count + 1)}>Click Me</button>\n      <SearchBox searchChange={onSearchChange} />\n      <Scroll>\n        <ErrorBoundry>\n          <CardList robots={filteredRobots} />\n        </ErrorBoundry>\n      </Scroll>\n    </div>\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constants.js';\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const requestRobots = (dispatch) => {\n  dispatch({type: REQUEST_ROBOTS_PENDING})\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response=> response.json())\n    .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n    .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constants.js';\n\nconst initialStateSearch = {\n  searchField: ''\n}\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, {searchField: action.payload});\n      // break;\n    default:\n      return state;\n  }\n}\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: ''\n}\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, {isPending: true})\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {robots: action.payload, isPending: false})\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, {error: action.payload, isPending: false})\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\n// import Card from './Card';\nimport App from './containers/App'\nimport registerServiceWorker from './registerServiceWorker';\nimport {searchRobots, requestRobots} from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}